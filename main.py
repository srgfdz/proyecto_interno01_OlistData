import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import plotly.express as px


# Importo las funciones propias de pipelines
from pipelines import *
st.set_page_config(layout="wide")


st.title("Proyecto 01 - Olist Data")

st.markdown(
    """
## 游논 Integrantes del grupo

- **Javier S치nchez de las Heras** - [@javierstemdo](https://github.com/javierstemdo)  
- **Mariam Guadalupe N칰침ez** - [@mariamgn-stemdo](https://github.com/mariamgn-stemdo)  
- **Sergio Fern치ndez Nevado** - [@srgfdz](https://github.com/srgfdz)
"""
)

# Cargar datos 
df_customers = pd.read_csv('./datasets_limpios/olist_order_customer.csv')
df_orders = pd.read_csv('./datasets_limpios/olist_orders_dataset.csv')
df_sellers = pd.read_csv('./datasets_limpios/olist_sellers_dataset.csv')
df_reviews = pd.read_csv('./datasets_limpios/olist_order_reviews_dataset_clean.csv')
df_order_items = pd.read_csv('./datasets_limpios/olist_order_items_dataset.csv')
df_products = pd.read_csv('./datasets_limpios/olist_products_dataset.csv')

# *** GR츼FICO DEL APARTDO 1 ***
st.header("1. N칰mero de Clientes por Estado")


# Convierto los nombres de los estados a may칰sculas, ya que en la normalizaci칩n los he pasado a min칰sculas
df_customers['customer_state'] = df_customers['customer_state'].str.upper()
df_customers['customer_city'] = df_customers['customer_city'].str.title()
df_sellers['seller_state'] = df_sellers['seller_state'].str.upper()
df_sellers['seller_city'] = df_sellers['seller_city'].str.title()

df_products['product_category_name'] = df_products['product_category_name'].str.replace('_', ' ').str.title()



# no hay clientes que no tengan ning칰n pedido, por lo que puedo usar inner y no perder registro de ning칰n cliente
df_customers_orders = df_customers.merge(df_orders, on='customer_id', how='inner')
# print(df_customers_orders)

# Convierto las fechas fechas con el pipeline personalizado
datetime_fields = {
        "order_purchase_timestamp": "%Y-%m-%d %H:%M:%S",
        "order_approved_at": "%Y-%m-%d %H:%M:%S",
        "order_delivered_carrier_date": "%Y-%m-%d %H:%M:%S",
        "order_delivered_customer_date": "%Y-%m-%d %H:%M:%S",
        "order_estimated_delivery_date": "%Y-%m-%d",
    }

df_customers_orders = clean_datetime_columns_pandas(df_customers_orders, datetime_fields)
# df_customers_orders['order_purchase_timestamp'] = pd.to_datetime(df_customers_orders['order_purchase_timestamp'])

#Pongo estos inputs en la misma l칤nea
col1, col2 = st.columns(2)

# Input con el n칰mero de estados a mostrar
with col1:
        orden_opcion = st.selectbox(
        "Informaci칩n a mostrar",
        options=[
            "Estados con mayor n칰mero de clientes",
            "Estados con menor n칰mero de clientes",
            "Estados con mayor n칰mero de vendedores",
            "Estados con menor n칰mero de vendedores"
        ],
        index=0
    )


# Input para invertir el orden (a침ado estilos para centrarl overticalmente)
with col2:
    top_n = st.selectbox("N췈 de Estados a mostrar", options=[3, 5, 10, 20], index=1)


# Filtrado por fecha (solo aplica a clientes)
fecha_min = df_customers_orders['order_purchase_timestamp'].min().to_pydatetime()
fecha_max = df_customers_orders['order_purchase_timestamp'].max().to_pydatetime()

fecha_inicio, fecha_fin = st.slider(
    "Rango de fechas de compra",
    min_value=fecha_min,
    max_value=fecha_max,
    value=(fecha_min, fecha_max),
    format="DD/MM/YYYY"
)

# Par치metros de agrupaci칩n seg칰n lo seleccionado por el usuario
tipo = "clientes" if "cliente" in orden_opcion else "vendedores"
orden_invertido = "menor" in orden_opcion

if tipo == "clientes":
    df_filtrado = df_customers_orders[
        (df_customers_orders['order_purchase_timestamp'] >= pd.to_datetime(fecha_inicio)) &
        (df_customers_orders['order_purchase_timestamp'] <= pd.to_datetime(fecha_fin))
    ]

    agrupado = (
        df_filtrado.groupby('customer_state')['customer_unique_id']
        .nunique()
        .sort_values(ascending=orden_invertido)
        .head(top_n)
        .reset_index()
        .rename(columns={'customer_unique_id': 'count'})
    )

    total = df_filtrado['customer_unique_id'].nunique()
    agrupado['percentage'] = (agrupado['count'] / total * 100).round(2)

    estados_mostrados = agrupado['customer_state'].tolist()

    df_tabla = df_filtrado[df_filtrado['customer_state'].isin(estados_mostrados)].copy()
    clientes_por_ciudad = (
        df_tabla.groupby(['customer_state', 'customer_city'])['customer_unique_id']
        .nunique()
        .reset_index()
        .rename(columns={'customer_state': 'Estado', 'customer_city': 'Ciudad', 'customer_unique_id': 'N췈 de Clientes'})
    )
    clientes_por_ciudad['Estado'] = pd.Categorical(clientes_por_ciudad['Estado'], categories=estados_mostrados, ordered=True)
    clientes_por_ciudad.sort_values(by=['Estado', 'N췈 de Clientes'], ascending=[True, False], inplace=True)

else:
    agrupado = (
        df_sellers.groupby('seller_state')['seller_id']
        .nunique()
        .sort_values(ascending=orden_invertido)
        .head(top_n)
        .reset_index()
        .rename(columns={'seller_id': 'count'})
    )

    total = df_sellers['seller_id'].nunique()
    agrupado['percentage'] = (agrupado['count'] / total * 100).round(2)

    estados_mostrados = agrupado['seller_state'].tolist()
    df_tabla = df_sellers[df_sellers['seller_state'].isin(estados_mostrados)].copy()

    clientes_por_ciudad = (
        df_tabla.groupby(['seller_state', 'seller_city'])['seller_id']
        .nunique()
        .reset_index()
        .rename(columns={'seller_state': 'Estado', 'seller_city': 'Ciudad', 'seller_id': 'N췈 de Vendedores'})
    )
    clientes_por_ciudad['Estado'] = pd.Categorical(clientes_por_ciudad['Estado'], categories=estados_mostrados, ordered=True)
    clientes_por_ciudad.sort_values(by=['Estado', 'N췈 de Vendedores'], ascending=[True, False], inplace=True)

# Gr치fico y tabla
if agrupado.empty:
    st.markdown("""
        <div style="padding: 20px; margin: 20px; border: 2px solid white; border-radius: 10px; background-color: #f8d7da; color: #721c24; text-align: center;">
            <strong>*** No hay registros para los filtros aplicados, ajusta los filtros y prueba nuevamente ***</strong>
        </div>
    """, unsafe_allow_html=True)
else:
    col_grafico, col_tabla = st.columns([2, 3])

    with col_grafico:
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(
            data=agrupado,
            x='customer_state' if tipo == "clientes" else 'seller_state',
            y='count',
            palette='Reds_r',
            ax=ax
        )

        ax.set_title(orden_opcion)
        ax.set_xlabel('Estado')
        ax.set_ylabel('N췈 ' + ('Clientes' if tipo == "clientes" else 'Vendedores'))

        for index, row in agrupado.iterrows():
            ax.text(
                x=index,
                y=row['count'],
                s=f"{row['percentage']}%",
                ha='center',
                va='bottom',
                fontsize=10,
                fontweight='bold',
                color='black'
            )

        st.pyplot(fig)

    with col_tabla:
        st.markdown(f"#### N칰mero de {'Clientes' if tipo == 'clientes' else 'Vendedores'} por Ciudad")
        st.dataframe(clientes_por_ciudad, use_container_width=True)




st.title("Mapa Brasil - Densidad de clientes y vendedores por estado")

# Crear dos columnas para mostrar los mapas en paralelo
col1, col2 = st.columns(2)

# URL del GeoJSON
geojson_url = 'https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/brazil-states.geojson'

#El filtrado de fechas solo actuar치 sobre el mapa de clientess
if tipo == "clientes":
    df_filtrado = df_customers_orders[
        (df_customers_orders['order_purchase_timestamp'] >= pd.to_datetime(fecha_inicio)) &
        (df_customers_orders['order_purchase_timestamp'] <= pd.to_datetime(fecha_fin))
    ]
else:
    # Si no se usa clientes, aseguramos que df_filtrado exista para los mapas sin romper el flujo
    df_filtrado = df_customers_orders.copy()

# Mapa de clientes

with col1:
    st.subheader("Clientes por estado")

    # Agrupar por estado sin limitar por top_n para el mapa
    clientes_por_estado_mapa = (
        df_filtrado.groupby('customer_state')['customer_unique_id']
        .nunique()
        .reset_index()
        .rename(columns={'customer_unique_id': 'count_customers'})
    )
    clientes_por_estado_mapa['customer_state'] = clientes_por_estado_mapa['customer_state'].str.upper()

    fig_clientes = px.choropleth(
        clientes_por_estado_mapa,
        geojson=geojson_url,
        locations='customer_state',
        featureidkey='properties.sigla',
        color='count_customers',
        color_continuous_scale='OrRd',
        scope='south america',
        labels={'count_customers': 'N췈 Clientes'}
    )
    fig_clientes.update_geos(fitbounds="locations", visible=False)
    fig_clientes.update_layout(margin={"r":0,"t":0,"l":0,"b":0})

    st.plotly_chart(fig_clientes, use_container_width=True)

# Mapa de los vendedores
with col2:
    st.subheader("Vendedores por estado")

    # Agrupar vendedores 칰nicos por estado
    vendedores_por_estado_mapa = (
        df_sellers.groupby('seller_state')['seller_id']
        .nunique()
        .reset_index()
        .rename(columns={'seller_id': 'count_sellers'})
    )
    vendedores_por_estado_mapa['seller_state'] = vendedores_por_estado_mapa['seller_state'].str.upper()

    fig_vendedores = px.choropleth(
        vendedores_por_estado_mapa,
        geojson=geojson_url,
        locations='seller_state',
        featureidkey='properties.sigla',
        color='count_sellers',
        color_continuous_scale='Blues',
        scope='south america',
        labels={'count_sellers': 'N췈 Vendedores'}
    )
    fig_vendedores.update_geos(fitbounds="locations", visible=False)
    fig_vendedores.update_layout(margin={"r":0,"t":0,"l":0,"b":0})

    st.plotly_chart(fig_vendedores, use_container_width=True)



# *** GR츼FICO DEL APARTDO 2 ***

# Ampliar el ancho de la p치gina
# st.set_page_config(layout="wide")

# T칤tulo de secci칩n
st.header("2. Estados con mayor porcentaje de pedidos")

# Relacionar los datasets por 'customer_id'
df_merged = pd.merge(df_customers, df_orders, on="customer_id", how="inner")

# Asegurar may칰sculas en estados y formato t칤tulo en ciudades
df_merged["customer_state"] = df_merged["customer_state"].astype(str).str.upper()
df_merged["customer_city"] = df_merged["customer_city"].astype(str).str.title()

# Calcular n칰mero de clientes 칰nicos por ciudad
clientes_por_ciudad = (
    df_merged.groupby(["customer_state", "customer_city"])["customer_unique_id"]
    .nunique()
    .reset_index()
)
clientes_por_ciudad.columns = ["Estado", "Ciudad", "N칰mero de clientes"]

# Calcular n칰mero de pedidos por ciudad (conteo de order_id por ciudad)
pedidos_por_ciudad = (
    df_merged.groupby(["customer_state", "customer_city"])["order_id"]
    .count()
    .reset_index()
)
pedidos_por_ciudad.columns = ["Estado", "Ciudad", "N칰mero de pedidos"]

# Combinar ambas tablas
tabla = pedidos_por_ciudad.merge(clientes_por_ciudad, on=["Estado", "Ciudad"])

# Calcular ratio como n칰mero entero
tabla['Ratio de Pedidos por Cliente'] = (
    tabla['N칰mero de pedidos'] / tabla['N칰mero de clientes']
).round(2).astype(int)

# Select de estado
estados_unicos = sorted(tabla["Estado"].unique())
estado_seleccionado = st.selectbox(
    "Selecciona un estado para ver sus ciudades", estados_unicos
)

# Filtrar por estado y preparar Top 10
datos_estado = tabla[tabla["Estado"] == estado_seleccionado].copy()
datos_estado = datos_estado.sort_values(by="N칰mero de pedidos", ascending=False)

top10_estados = datos_estado.head(10).copy()
total_top10 = top10_estados["N칰mero de pedidos"].sum()

# Calcular porcentaje dentro del top 10
top10_estados["Porcentaje"] = (
    top10_estados["N칰mero de pedidos"] / total_top10 * 100
).round(2)

# Gr치fico circular
fig, ax = plt.subplots(figsize=(8, 8))
colors = plt.cm.PuBu(np.linspace(0.3, 1, len(top10_estados)))

ax.pie(
    top10_estados["Porcentaje"],
    labels=top10_estados["Ciudad"],
    autopct="%1.1f%%",
    startangle=140,
    colors=colors,
    textprops={"fontsize": 9},
    wedgeprops=dict(edgecolor="white"),
    labeldistance=1.05,
)

ax.set_title(f"Top 10 ciudades por pedidos en {estado_seleccionado}", fontsize=14)
ax.axis("equal")

# Mostrar gr치fico y tabla
col1, col2 = st.columns([1.3, 1.7])

with col1:
    st.pyplot(fig)

with col2:
    st.subheader(f"Detalle de ciudades en {estado_seleccionado}")
    tabla_filtrada = top10_estados[
        [
            "Ciudad",
            "N칰mero de pedidos",
            "N칰mero de clientes",
            "Porcentaje",
            "Ratio de Pedidos por Cliente",
        ]
    ].reset_index(drop=True)

    st.dataframe(tabla_filtrada, use_container_width=True)

    
# *** GR츼FICO DEL APARTDO 3 ***

# T칤tulo de secci칩n
st.header("3. Pedidos por ciudad")

# Cargar los datos
# df_customers = pd.read_csv("./datasets_limpios/olist_order_customer.csv")
# df_orders = pd.read_csv("./datasets_limpios/olist_orders_dataset.csv")

# Juntar las dos tablas con un merge
merge_tablas = pd.merge(df_customers, df_orders, on="customer_id")

# Convertir fechas a formato datetime
merge_tablas["order_delivered_customer_date"] = pd.to_datetime(
    merge_tablas["order_delivered_customer_date"]
)
merge_tablas["order_estimated_delivery_date"] = pd.to_datetime(
    merge_tablas["order_estimated_delivery_date"]
)

# Calcular retraso
merge_tablas["dias_retraso"] = (
    merge_tablas["order_delivered_customer_date"]
    - merge_tablas["order_estimated_delivery_date"]
).dt.days

# Filtrar los pedidos tard칤os
pedidos_tarde = merge_tablas[merge_tablas["dias_retraso"] > 0]

# Calcular n칰mero de pedidos por ciudad
pedidos_por_ciudad = merge_tablas.groupby("customer_city")[
    "order_delivered_customer_date"
].count()

# Crear el dataframe con los datos agregados
merge_tablas = (
    pedidos_tarde.groupby("customer_city")
    .agg(
        num_pedidos_tarde=("dias_retraso", "count"),
        tiempo_medio_retraso=("dias_retraso", "mean"),
    )
    .reset_index()
)

# calcular porcentaje pedidos tard칤os por ciudad
porcentaje_tarde = []
for ciudad in merge_tablas["customer_city"]:
    total_pedidos = pedidos_por_ciudad.loc[ciudad]
    pedidos_tardios = merge_tablas.loc[
        merge_tablas["customer_city"] == ciudad, "num_pedidos_tarde"
    ].values[0]
    porcentaje_tarde.append((pedidos_tardios / total_pedidos) * 100)

merge_tablas["porcentaje_tarde"] = porcentaje_tarde

# Obtener el n칰mero de pedidos tarde ordenados
df_resultado_num_pedidos_tarde = merge_tablas.sort_values(
    by="num_pedidos_tarde", ascending=False
)
df_top_15 = df_resultado_num_pedidos_tarde.head(15)

# Gr치fico num pedidos tarde por ciudad
#fig, ax = plt.subplots(figsize=(12, 6))

#sns.boxplot(
    #data=df_top_15,
    #x="customer_city",
    #y="num_pedidos_tarde",
    #palette="Blues",
    #width=0.6,
#)

# Configurar representaci칩n puntos del boxplot
#sns.stripplot(
    #data=df_top_15,
    #x="customer_city",
    #y="num_pedidos_tarde",
    #color="black",
    #size=6,
    #alpha=0.7,
    #jitter=True,
#)

# Etiquetas y t칤tulo
#ax.set_xlabel("Ciudades")
#ax.set_ylabel("N칰mero de pedidos tard칤os")
#ax.set_title("Distribuci칩n de pedidos que llegan tarde por ciudad")
#ax.set_xticklabels([])

# Mostrar gr치fico
#st.pyplot(fig)

# Gr치fico para ciudades con m치s pedidos tardios
fig, ax = plt.subplots(figsize=(6, 4))
sns.barplot(data=df_top_15, x="customer_city", y="num_pedidos_tarde", palette="Blues_r")
ax.set_xticklabels(df_top_15["customer_city"], rotation=45, ha="right")
ax.set_xlabel("Ciudad")
ax.set_ylabel("Pedidos tard칤os")
ax.set_title("Top 15 ciudades con m치s pedidos tard칤os")
st.pyplot(fig)

# Ordenar datos
df_resultado_porcentaje_tarde = merge_tablas.sort_values(
    by="porcentaje_tarde", ascending=False
)

# Establecer fondo blanco
sns.set_style("white")

# Crear figura
fig, ax = plt.subplots(figsize=(12, 6))

# Configurar puntos del gr치fico
sns.scatterplot(
    data=df_resultado_porcentaje_tarde,
    x="customer_city",
    y="porcentaje_tarde",
    color="black",
    alpha=0.8,
    ax=ax,
)

# Etiquetas
ax.set_xlabel("Ciudad")
ax.set_ylabel("Porcentaje de pedidos tard칤os")
ax.set_title("Porcentaje de pedidos tard칤os por ciudad")

# Ocultar etiquetas del eje X
ax.set_xticklabels([])

# Mostrar gr치fico
st.pyplot(fig)

# Mostrar tabla con los datos m치s detallados
st.subheader(f"N칰mero y porcentaje de pedidos tarde por ciudad")
tabla_filtrada = (
    merge_tablas[
        [
            "customer_city",
            "porcentaje_tarde",
            "num_pedidos_tarde",
        ]
    ]
    .rename(
        columns={
            "customer_city": "Ciudad",
            "porcentaje_tarde": "Porcentaje de pedidos tard칤os",
            "num_pedidos_tarde": "N칰mero de pedidos tard칤os",
        }
    )
    .reset_index(drop=True)
)

# Mostrar tabla
st.dataframe(tabla_filtrada, use_container_width=True)

# Ordenar los datos tiempo_medio_retraso
df_resultado_tiempo_medio_retraso = merge_tablas.sort_values(
    by="tiempo_medio_retraso", ascending=False
)

# Estilo color blanco para el fondo
sns.set_style("white")

# Crear figura
fig, ax = plt.subplots(figsize=(6, 4))

# Crear gr치fico
sns.lineplot(
    data=df_resultado_tiempo_medio_retraso,
    x="customer_city",
    y="tiempo_medio_retraso",
    marker="o",
    color="black",
    linewidth=2,
    markeredgecolor="black",
    markeredgewidth=1,
)

# Etiquetas y t칤tulo
ax.set_xticklabels([])
ax.set_xlabel("Ciudades")
ax.set_ylabel("D칤as de retraso promedio")
ax.set_title("Retraso promedio en la entrega por ciudad")

# Mostrar la gr치fica
st.pyplot(fig)

# Obtener las 15 ciudades con m치s retraso
df_top_15 = df_resultado_tiempo_medio_retraso.head(15)

# Crear figura
fig, ax = plt.subplots(figsize=(6, 4))
sns.lineplot(
    data=df_top_15,
    x="customer_city",
    y="tiempo_medio_retraso",
    marker="o",
    color="red",
    linewidth=2,
)

ax.set_xticklabels(df_top_15["customer_city"], rotation=45, ha="right")
ax.set_xlabel("Ciudad")
ax.set_ylabel("D칤as de retraso promedio")
ax.set_title("Retraso promedio en la entrega por ciudad (Top 15)")

# Mostrar gr치fica
st.pyplot(fig)



# *** GR츼FICO DEL APARTDO 4 ***
st.header("4.Reviews por estado")

#Primero preparo el dataframe con todos los datos que necesito:


df_customers_reviews = pd.merge(
    pd.merge(df_reviews, df_orders, on='order_id', how='inner'),
    df_customers, on='customer_id', how='inner'
)

# print(df_customers_reviews.head(5))
# df_customers_reviews.info()

datetime_params = {
        "review_creation_date": "%Y-%m-%dT%H:%M:%S.%f",
        "review_answer_timestamp": "%Y-%m-%dT%H:%M:%S.%f",
        "order_purchase_timestamp": "%Y-%m-%d %H:%M:%S",
        "order_approved_at": "%Y-%m-%d %H:%M:%S",
        "order_delivered_carrier_date": "%Y-%m-%d %H:%M:%S",
        "order_delivered_customer_date": "%Y-%m-%d %H:%M:%S",
        "order_estimated_delivery_date": "%Y-%m-%d",
    }

df_customers_reviews = clean_datetime_columns_pandas(df_customers_reviews, datetime_params)

# df_customers_reviews.info()

# A침ado una columna con los d칤as de retraso (si es positivo habr치 tenido retraso en la entrega)
df_customers_reviews['dias_retraso'] = (
    df_customers_reviews['order_delivered_customer_date'].dt.floor('D') - df_customers_reviews['order_estimated_delivery_date']
).dt.days.astype('Int64')




# Inputs de filtrado
c1, c2 = st.columns([6, 1])

with c1:
    min_date = df_customers_reviews['review_creation_date'].min().date()
    max_date = df_customers_reviews['review_creation_date'].max().date()
    fecha_inicio, fecha_fin = st.slider(
        "Selecciona el rango de fechas de review",
        min_value=min_date,
        max_value=max_date,
        value=(min_date, max_date),
        format="DD/MM/YYYY"
    )

with c2:
    excluir_retrasos = st.checkbox("Excluir retrasos", value=True)

col1, col2 = st.columns(2)

with col1:
    top_n = st.selectbox("N췈 de estados a mostrar", options=[5, 10, 15, 20], index=1)

with col2:
    orden = st.selectbox(
        "Estados a mostrar",
        options=[
            "Mayor n칰mero de reviews",
            "Menor n칰mero de reviews",
            "Mayor puntuaci칩n media",
            "Menor puntuaci칩n media"
        ],
        index=0
    )


# Aplicar filtros
filtro_fecha = (df_customers_reviews['review_creation_date'].dt.date >= fecha_inicio) & \
               (df_customers_reviews['review_creation_date'].dt.date <= fecha_fin)
df_filtrado = df_customers_reviews[filtro_fecha]

if excluir_retrasos:
    df_filtrado = df_filtrado[~(df_filtrado['dias_retraso'] > 0)]

# Agrupar
df_grouped = df_filtrado.groupby('customer_state').agg(
    num_reviews=('review_score', 'count'),
    avg_score=('review_score', 'mean')
).reset_index()

# Ordenar 
if orden == "Mayor n칰mero de reviews":
    df_grouped = df_grouped.sort_values(by='num_reviews', ascending=False)
elif orden == "Menor n칰mero de reviews":
    df_grouped = df_grouped.sort_values(by='num_reviews', ascending=True)
elif orden == "Mayor puntuaci칩n media":
    df_grouped = df_grouped.sort_values(by='avg_score', ascending=False)
elif orden == "Menor puntuaci칩n media":
    df_grouped = df_grouped.sort_values(by='avg_score', ascending=True)


df_grouped = df_grouped.head(top_n)


fig, ax1 = plt.subplots(figsize=(12, 6))
sns.set_style("whitegrid")

# Eje izquierdo: n칰mero de reviews
sns.barplot(
    data=df_grouped,
    x='customer_state',
    y='num_reviews',
    color='skyblue',
    ax=ax1,
    label="N칰mero de Reviews"
)

ax1.set_ylabel("N칰mero de Reviews")
ax1.set_xlabel("Estado")
max_reviews = df_grouped['num_reviews'].max()
ax1.set_ylim(0, max_reviews * 1.2)

# Eje derecho (oculto): puntuaci칩n media y oculto tambi칠n su grid
ax2 = ax1.twinx()
ax2.grid(False)  

ax2.plot(
    df_grouped['customer_state'],
    df_grouped['avg_score'],
    color='orange',
    marker='o',
    linewidth=2,
    linestyle='-',
    label='Puntuaci칩n Media'
)

# Etiquetas de puntuaci칩n junto a los puntos
for x, y in zip(range(len(df_grouped)), df_grouped['avg_score']):
    ax2.text(
        x=x,
        y=y + 0.05,
        s=f"{y:.2f}",
        ha='center',
        va='bottom',
        fontsize=9,
        color='black'
    )

# Ocultar eje derecho (pero mantener escala para que se vean bien los puntos)
max_score = df_grouped['avg_score'].max()
ax2.set_ylim(0, max_score * 1.2)
ax2.tick_params(axis='y', left=False, right=False, labelleft=False, labelright=False)
ax2.set_ylabel("")

# Leyenda manual
ax1.legend(["N칰mero de Reviews"], loc='upper left')
ax1.plot([], [], color='orange', marker='o', linestyle='-', label='Puntuaci칩n Media')
ax1.legend(loc='upper right')

col1, col2, col3 = st.columns([1, 5, 1])  # Relaci칩n de anchos

with col2:
    st.pyplot(fig)

print('df_customers_reviews')
print(df_customers_reviews.info())




    
st.header("5. Reviews por categor칤a de producto")

# Unimos order_items con productos
df_items_productos = pd.merge(df_order_items, df_products, on='product_id', how='left')

# Aseguramos que el campo price sea num칠rico
df_items_productos['price'] = pd.to_numeric(df_items_productos['price'], errors='coerce')

# Unimos df_customers_reviews con order_items + productos (por order_id)
df_reviews_categoria = pd.merge(
    df_customers_reviews,
    df_items_productos[['order_id', 'product_category_name', 'price']],
    on='order_id',
    how='left'
)

# Filtros de Streamlit
c1, c2 = st.columns([6, 1])

with c1:
    min_date = df_reviews_categoria['review_creation_date'].min().date()
    max_date = df_reviews_categoria['review_creation_date'].max().date()
    fecha_inicio, fecha_fin = st.slider(
        "Selecciona el rango de fechas de review",
        min_value=min_date,
        max_value=max_date,
        value=(min_date, max_date),
        format="DD/MM/YYYY",
        key="slider_fecha_reviews_categoria"
    )

with c2:
    excluir_retrasos = st.checkbox("Excluir retrasos", value=True, key="checkbox_excluir_retrasos_categoria")

col1, col2 = st.columns(2)

with col1:
    top_n = st.selectbox("N췈 de categor칤as a mostrar", options=[5, 10, 15, 20], index=1)

with col2:
    orden = st.selectbox(
        "M칠trica a mostrar",
        options=[
            "Mayor n칰mero de reviews",
            "Menor n칰mero de reviews",
            "Mayor puntuaci칩n media",
            "Menor puntuaci칩n media",
            "Mayor facturaci칩n",
            "Menor facturaci칩n"
        ],
        index=0
    )

# Filtro de fechas y retrasos
filtro_fecha = (df_reviews_categoria['review_creation_date'].dt.date >= fecha_inicio) & \
               (df_reviews_categoria['review_creation_date'].dt.date <= fecha_fin)
df_filtrado = df_reviews_categoria[filtro_fecha]

if excluir_retrasos:
    df_filtrado = df_filtrado[~(df_filtrado['dias_retraso'] > 0)]

# Agrupaci칩n por categor칤a incluyendo facturaci칩n
df_grouped = df_filtrado.groupby('product_category_name').agg(
    num_reviews=('review_score', 'count'),
    avg_score=('review_score', 'mean'),
    total_facturacion=('price', 'sum')
).reset_index()

# Limpieza de posibles nulos en facturaci칩n
df_grouped['total_facturacion'] = df_grouped['total_facturacion'].fillna(0)

# Ordenamiento seg칰n selecci칩n
if orden == "Mayor n칰mero de reviews":
    df_grouped = df_grouped.sort_values(by='num_reviews', ascending=False)
elif orden == "Menor n칰mero de reviews":
    df_grouped = df_grouped.sort_values(by='num_reviews', ascending=True)
elif orden == "Mayor puntuaci칩n media":
    df_grouped = df_grouped.sort_values(by='avg_score', ascending=False)
elif orden == "Menor puntuaci칩n media":
    df_grouped = df_grouped.sort_values(by='avg_score', ascending=True)
elif orden == "Mayor facturaci칩n":
    df_grouped = df_grouped.sort_values(by='total_facturacion', ascending=False)
elif orden == "Menor facturaci칩n":
    df_grouped = df_grouped.sort_values(by='total_facturacion', ascending=True)

# Nos quedamos con las N categor칤as seleccionadas
df_grouped = df_grouped.head(top_n)

# Layout: tabla y gr치fico en paralelo
col_grafico, col_tabla = st.columns([2, 2])

with col_grafico:
    # Determinar qu칠 variable mostrar en el eje Y
    if "facturaci칩n" in orden:
        y_var = "total_facturacion"
        y_label = "Facturaci칩n Total"
        legend_label = "Facturaci칩n Total"
    else:
        y_var = "num_reviews"
        y_label = "N칰mero de Reviews"
        legend_label = "N칰mero de Reviews"

    # Gr치fico
    fig, ax1 = plt.subplots(figsize=(10, 5)) 
    sns.set_style("whitegrid")

    # Barras (siempre mismo color)
    sns.barplot(
        data=df_grouped,
        x='product_category_name',
        y=y_var,
        color='skyblue',
        ax=ax1
    )

    # Mostrar etiqueta en eje Y izquierdo
    ax1.set_ylabel(y_label)

    ax1.set_xlabel("Categor칤a de Producto")
    ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha='right')
    max_y = df_grouped[y_var].max()
    ax1.set_ylim(0, max_y * 1.2)

    # L칤nea de puntuaci칩n media
    ax2 = ax1.twinx()
    ax2.grid(False)
    ax2.plot(
        df_grouped['product_category_name'],
        df_grouped['avg_score'],
        color='orange',
        marker='o',
        linewidth=2,
        linestyle='-'
    )

    # Etiquetas
    for x, y in zip(range(len(df_grouped)), df_grouped['avg_score']):
        ax2.text(
            x=x,
            y=y + 0.05,
            s=f"{y:.2f}",
            ha='center',
            va='bottom',
            fontsize=9,
            color='black'
        )

    ax2.set_ylim(0, df_grouped['avg_score'].max() * 1.2)
    ax2.tick_params(axis='y', left=False, right=False, labelleft=False, labelright=False)
    ax2.set_ylabel("")

    st.pyplot(fig)


with col_tabla:
    # Calculamos totales para porcentaje
    total_reviews = df_grouped['num_reviews'].sum()
    total_facturacion = df_grouped['total_facturacion'].sum()

    # A침adimos columnas de porcentaje
    df_grouped['% N칰mero de Reviews'] = df_grouped['num_reviews'] / total_reviews * 100
    df_grouped['% Facturaci칩n Total'] = df_grouped['total_facturacion'] / total_facturacion * 100

    # Redondeamos para mejor visualizaci칩n
    df_grouped['% N칰mero de Reviews'] = df_grouped['% N칰mero de Reviews'].round(2)
    df_grouped['% Facturaci칩n Total'] = df_grouped['% Facturaci칩n Total'].round(2)

    # Renombramos columnas para la tabla
    df_mostrar = df_grouped.rename(columns={
        'product_category_name': 'Categor칤a de Producto',
        'num_reviews': 'N칰mero de Reviews',
        'avg_score': 'Puntuaci칩n Media',
        'total_facturacion': 'Facturaci칩n Total',
        '% N칰mero de Reviews': '% N칰mero de Reviews',
        '% Facturaci칩n Total': '% Facturaci칩n Total'
    })

    # Mostramos tabla con nuevas columnas de porcentaje
    st.dataframe(
        df_mostrar[['Categor칤a de Producto', 'N칰mero de Reviews', '% N칰mero de Reviews',
                    'Puntuaci칩n Media', 'Facturaci칩n Total', '% Facturaci칩n Total']],
        use_container_width=True
    )



   
st.header("6. M칠tricas de la evoluci칩n del negocio")


# Columnas
col1, col2 = st.columns(2)

# Selector de m칠tricas a mostrar
with col1:
    metrica = st.selectbox(
        "Selecciona la m칠trica a mostrar",
        options=[
            'Volumen de Facturaci칩n',
            'Volumen de pedidos',
            'Volumen de clientes',
            'Puntuaci칩n media de las Reviews',
            'Porcentaje de pedidos con retraso',
            'D칤as de hasta la entrega de un pedido (Mediana)',
            'D칤as de retraso sobre el total de pedidos con retraso (Mediana)',
        ]
    )

# Selector de periodo de agrupaci칩n
with col2:
    periodo = st.selectbox(
        "Selecciona el periodo de agrupaci칩n",
        options=['Diario', 'Semanal', 'Mensual', 'Trimestral'],
        index=2
    )

# Selector estados
estados_disponibles = sorted(df_customers_orders['customer_state'].unique())
estados_seleccionados = st.multiselect(
    "Estados a mostrar (Por defecto todos)",
    options=estados_disponibles,
    default=estados_disponibles
)

# Slider de fechas
fecha_min = df_customers_orders['order_purchase_timestamp'].dt.date.min()
fecha_max = df_customers_orders['order_purchase_timestamp'].dt.date.max()

fecha_inicio, fecha_fin = st.slider(
    "Selecciona rango de fechas",
    min_value=fecha_min,
    max_value=fecha_max,
    value=(fecha_min, fecha_max),
    format="DD/MM/YYYY"
)

# Filtrado datos
df_filtrado = df_customers_orders[
    (df_customers_orders['order_purchase_timestamp'].dt.date >= fecha_inicio) &
    (df_customers_orders['order_purchase_timestamp'].dt.date <= fecha_fin) &
    (df_customers_orders['customer_state'].isin(estados_seleccionados))
].copy()

if df_filtrado.empty:
    st.warning("No hay datos para los filtros seleccionados.")
else:
    df_filtrado.set_index('order_purchase_timestamp', inplace=True)

    # Mapear periodo a frecuencia para resample
    if periodo == 'Diario':
        freq = 'D'
    elif periodo == 'Semanal':
        freq = 'W-MON'
    elif periodo == 'Trimestral':
        freq = 'Q'
    else:
        freq = 'M'

    # 칈ndice seg칰n la opci칩n seleccionada para switch
    opciones = [
        'Volumen de Facturaci칩n',
        'Volumen de pedidos',
        'Volumen de clientes',
        'Puntuaci칩n media de las Reviews',
        'Porcentaje de pedidos con retraso',
        'D칤as de hasta la entrega de un pedido (Mediana)',
        'D칤as de retraso sobre el total de pedidos con retraso (Mediana)',
    ]
    idx = opciones.index(metrica)

    switch = {
        # Volumen de Facturaci칩n (suma de precios de pedidos en el periodo)
        0: lambda: df_filtrado.reset_index().merge(
                df_order_items[['order_id', 'price']],
                on='order_id', how='left'
            ).set_index('order_purchase_timestamp')['price'].resample(freq).sum(),

        # Volumen de pedidos (n칰mero de pedidos en el periodo)
        1: lambda: df_filtrado['order_id'].resample(freq).count(),

        # Volumen de clientes 칰nicos (n칰mero de clientes 칰nicos en el periodo)
        2: lambda: df_filtrado['customer_unique_id'].resample(freq).nunique(),

        # Puntuaci칩n media de las reviews (media del score de review en el periodo)
        3: lambda: df_filtrado.reset_index().merge(
                df_customers_reviews[['order_id', 'review_score']],
                on='order_id', how='left'
            ).set_index('order_purchase_timestamp')['review_score'].resample(freq).mean(),

        # Porcentaje de pedidos con retraso (pedidos con d칤as de retraso > 0 sobre total pedidos en el periodo)
        4: lambda: df_filtrado.reset_index().merge(
                df_customers_reviews[['order_id', 'dias_retraso']],
                on='order_id', how='left'
            ).set_index('order_purchase_timestamp').pipe(lambda d: (
                d[d['dias_retraso'] > 0]['order_id'].resample(freq).count() /
                d['order_id'].resample(freq).count() * 100
            )).fillna(0),

        # Mediana de d칤as hasta la entrega de un pedido (mediana de diferencia entre entrega al cliente y compra)
        5: lambda: df_filtrado.assign(
                dias_entrega = (df_filtrado['order_delivered_customer_date'] - df_filtrado.index).dt.days
            )['dias_entrega'].resample(freq).median(),

        # Mediana de d칤as de retraso sobre pedidos con retraso (mediana de d칤as de retraso en pedidos retrasados)
        6: lambda: df_filtrado.reset_index().merge(
                df_customers_reviews[['order_id', 'dias_retraso']],
                on='order_id', how='left'
            ).set_index('order_purchase_timestamp').pipe(lambda d: (
                d[d['dias_retraso'] > 0]['dias_retraso'].resample(freq).median()
            ))
    }

    agrupado = switch.get(idx, lambda: pd.Series(dtype=float))()

    # Preparar DataFrame para gr치fica
    evolucion = agrupado.reset_index().rename(columns={'order_purchase_timestamp': 'periodo'})
    evolucion.rename(columns={evolucion.columns[1]: 'valor'}, inplace=True)

    titulo = f"Evoluci칩n {periodo.lower()} de {metrica.lower()}"
    eje_y = metrica

    # Crear gr치fica con plotly
    fig = px.line(
        evolucion,
        x='periodo',
        y='valor',
        labels={'periodo': 'Fecha', 'valor': eje_y},
        title=titulo,
        markers=True
    )
    fig.update_layout(
        xaxis_title="Fecha",
        yaxis_title=eje_y,
        margin={"r":0, "t":40, "l":0, "b":0}
    )
    st.plotly_chart(fig, use_container_width=True)

